apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: {{ .Values.mongodb.replicas }}
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: {{ .Values.mongodb.image }}
        env:
          - name: MONGO_INITDB_DATABASE
            valueFrom:
              configMapKeyRef:
                name: mongodb-conf
                key: MONGO_INITDB_DATABASE
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              configMapKeyRef:
                name: mongodb-conf
                key: MONGO_INITDB_ROOT_USERNAME
          - name: MONGO_INITDB_USERNAME
            valueFrom:
              configMapKeyRef:
                name: mongodb-conf
                key: MONGO_INITDB_USERNAME
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: MONGO_INITDB_ROOT_PASSWORD
          - name: MONGO_INITDB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mongodb-secret
                key: MONGO_INITDB_PASSWORD
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
{{ toYaml .Values.mongodb.resources | indent 10 }}
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_DATABASE: "{{ .Values.mongodb.env.MONGO_INITDB_DATABASE }}"
  MONGO_INITDB_ROOT_USERNAME: "{{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}"
  MONGO_INITDB_USERNAME: "{{ .Values.mongodb.env.MONGO_INITDB_USERNAME }}"

---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
stringData:
  MONGO_INITDB_ROOT_PASSWORD: "{{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}"
  MONGO_INITDB_PASSWORD: "{{ .Values.mongodb.env.MONGO_INITDB_PASSWORD }}"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init-user
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "0"
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mongo-init
          image: {{ .Values.mongodbInit.image }}
          command:
            - "mongosh"
            - "--host"
            - "mongodb"
            - "-u"
            - "$(MONGO_INITDB_ROOT_USERNAME)"
            - "-p"
            - "$(MONGO_INITDB_ROOT_PASSWORD)"
            - "--authenticationDatabase"
            - "admin"
            - "--eval"
            - |
              db = db.getSiblingDB('$(MONGO_INITDB_DATABASE)');
              db.createUser({
                user: "$(MONGO_INITDB_USERNAME)",
                pwd: "$(MONGO_INITDB_PASSWORD)",
                roles: [ { role: "readWrite", db: "$(MONGO_INITDB_DATABASE)" } ]
              });
          envFrom:
            - configMapRef:
                name: mongodb-conf
            - secretRef:
                name: mongodb-secret
          resources:
{{ toYaml .Values.mongodbInit.resources | indent 12 }}
